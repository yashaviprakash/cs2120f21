import .lecture_28
-- defines sum_up_to 

/-
The difference between simple case analysis and
induction is that induction let's us assume we 
are given an arbitrary number, n', and an answer
(value or proof) for n'. Have these objects is 
often the key to completing a proof,by giving a
formula that uses them to computing a result 
n'+1. 

Now we'll show where case analysis suffices to
prove that 0 is a left identity for addition as
we've defined it (because we've given the rule
for this case to the induction operation), but
where it will not work to prove that 0 is a 
right identity, For that, we'll need, and we'll
demonstrate, proof by induction.
-/

/-
Let's see Lean's definition of add.
-/

#check nat.add -- right click and go to definition

/-
Note that Lean's version uses recursion on the
second argument. So we have a rule for m + 0 and
a rule for m + n'.succ.
-/

/-
An easy proof that 0 is a left identity.
-/

example : ∀ (m : ℕ), nat.add m 0 = m :=
begin
  assume m,
  apply rfl, 
end

/-
Why does case analysis fail in a proof that it's
also a right identity? Because we don't already
have a rule for that, as we did for the left case.
-/
example : ∀ (m : ℕ), nat.add 0 m = m :=
begin
  assume m,
  apply rfl,          -- no rule for adding 0 on right!
  -- STUCK!
end

/-
... or are we?!

Proof by induction on n. 
-/

example : ∀ (n : ℕ), nat.add 0 n = n :=
begin
    assume n,
    induction n with n' ih,

/-
Π 
  {motive : ℕ → Sort u_1}, 
  motive 0 → 
  (Π (n : ℕ), motive n → motive n.succ) → 
  Π (n : ℕ), 
  motive n
-/

    -- base case, n = 0
    --simp [my_add],
    exact rfl,

    -- inductive 
    -- simplify using rules that define my_add
    -- my_add n'.succ 0 = n'.succ
    -- succ (my_add n' 0) = n'.succ
    simp [nat.add],
    /-
   Sullivan working to reduce unnecessary
   complexity in proof state as expressed.
    -/
    -- nat.rec 
      -- 0 
      -- (λ (n' : ℕ), nat.succ) 
      -- n'
    /-
    Application to n' of function
    defined by induction where (1)
    answer for 0 is 0, and (2) the
    answer for n'+1 is generated by
    succ, applied to n' is n'. But
    that's the induction hypothesis. 
    -/
    exact ih,
end




